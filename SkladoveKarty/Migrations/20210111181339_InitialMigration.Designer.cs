// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkladoveKarty;

namespace SkladoveKarty.Migrations
{
    [DbContext(typeof(Models.DatabaseContext))]
    [Migration("20210111181339_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("SkladoveKarty.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SkladoveKarty.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SkladoveKarty.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SkladoveKarty.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<string>("Invoice")
                        .HasColumnType("TEXT");

                    b.Property<int>("Movement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageCardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StorageCardId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SkladoveKarty.StorageCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("StoreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("StorageCards");
                });

            modelBuilder.Entity("SkladoveKarty.StorageCardSupplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<long>("StorageCardId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StorageCardId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StorageCardSuppliers");
                });

            modelBuilder.Entity("SkladoveKarty.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("SkladoveKarty.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("DATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SkladoveKarty.Item", b =>
                {
                    b.HasOne("SkladoveKarty.Customer", "Customer")
                        .WithMany("Items")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SkladoveKarty.StorageCard", "StorageCard")
                        .WithMany("Items")
                        .HasForeignKey("StorageCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("StorageCard");
                });

            modelBuilder.Entity("SkladoveKarty.StorageCard", b =>
                {
                    b.HasOne("SkladoveKarty.Account", "Account")
                        .WithMany("StorageCards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkladoveKarty.Category", "Category")
                        .WithMany("StorageCards")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkladoveKarty.Store", "Store")
                        .WithMany("StorageCards")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SkladoveKarty.StorageCardSupplier", b =>
                {
                    b.HasOne("SkladoveKarty.StorageCard", "StorageCard")
                        .WithMany("StorageCardSuppliers")
                        .HasForeignKey("StorageCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkladoveKarty.Supplier", "Supplier")
                        .WithMany("StorageCardSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageCard");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SkladoveKarty.Account", b =>
                {
                    b.Navigation("StorageCards");
                });

            modelBuilder.Entity("SkladoveKarty.Category", b =>
                {
                    b.Navigation("StorageCards");
                });

            modelBuilder.Entity("SkladoveKarty.Customer", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SkladoveKarty.StorageCard", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("StorageCardSuppliers");
                });

            modelBuilder.Entity("SkladoveKarty.Store", b =>
                {
                    b.Navigation("StorageCards");
                });

            modelBuilder.Entity("SkladoveKarty.Supplier", b =>
                {
                    b.Navigation("StorageCardSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
